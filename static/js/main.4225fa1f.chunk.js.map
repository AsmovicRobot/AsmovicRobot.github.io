{"version":3,"sources":["serviceWorker.js","Components/Card.js","Components/CardList.js","Components/SearchBox.js","Components/Scroll.js","Containers/App.js","actions.js","constants.js","reducers.js","index.js"],"names":["Boolean","window","location","hostname","match","Card","_ref","id","username","email","react_default","a","createElement","className","src","concat","alt","CardList","robots","map","user","i","Components_Card","key","name","SearchBox","searchfield","searchChange","onChange","type","placeholder","Scroll","props","style","overflowY","border","height","children","App","this","onRequestRobots","_this$props","searchField","onSearchChange","isPending","filteredRobots","filter","toLowerCase","includes","Components_SearchBox","Components_Scroll","Components_CardList","Component","connect","state","searchRobots","requestRobots","error","dispatch","event","payload","target","value","fetch","then","response","json","data","catch","initialState","initialStateRobots","logger","createLogger","rootReducer","combineReducers","arguments","length","undefined","action","Object","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","es","src_Containers_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"uPAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,uGCDSC,EAdF,SAAAC,GAAwB,IAAtBC,EAAsBD,EAAtBC,GAAGC,EAAmBF,EAAnBE,SAASC,EAAUH,EAAVG,MAEvB,OACIC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,sDACfH,EAAAC,EAAAC,cAAA,OAAKE,IAAG,wBAAAC,OAA0BR,EAA1B,aAAyCS,IAAI,kBACrDN,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,UAAKJ,GACLE,EAAAC,EAAAC,cAAA,SAAIH,MCeDQ,EArBE,SAAAX,GAAa,IAAXY,EAAWZ,EAAXY,OAEf,OAEIR,EAAAC,EAAAC,cAAA,WAEOM,EAAOC,IAAI,SAACC,EAAKC,GAChB,OACAX,EAAAC,EAAAC,cAACU,EAAD,CACAC,IAAOF,EACPd,GAAMW,EAAOG,GAAGd,GAChBiB,KAAQN,EAAOG,GAAGG,KAClBhB,SAAYU,EAAOG,GAAGb,SACtBC,MAASS,EAAOG,GAAGZ,UAT3B,MCGOgB,EARG,SAAAnB,GAAiCA,EAA/BoB,YAA+B,IAAlBC,EAAkBrB,EAAlBqB,aAC7B,OACIjB,EAAAC,EAAAC,cAAA,OAAKC,UAAY,OACbH,EAAAC,EAAAC,cAAA,SAAOC,UAAU,mCAAmCe,SAAUD,EAAcE,KAAK,SAASC,YAAY,qBCMnGC,SARA,SAACC,GACZ,OACItB,EAAAC,EAAAC,cAAA,OAAKqB,MAAO,CAACC,UAAU,SAAUC,OAAS,kBAAmBC,OAAO,UAC/DJ,EAAMK,SADX,OC8EFC,4LAWgBN,GACdO,KAAKP,MAAMQ,mDAQP,IAAAC,EAEoDF,KAAKP,MAArDU,EAFJD,EAEIC,YAAYC,EAFhBF,EAEgBE,eAAezB,EAF/BuB,EAE+BvB,OAAO0B,EAFtCH,EAEsCG,UACpCC,EAAiB3B,EAAO4B,OAAO,SAAA5B,GACrC,OAAOA,EAAOM,KAAKuB,cAAcC,SAASN,EAAYK,iBAGtD,OAAOH,EACHlC,EAAAC,EAAAC,cAAA,wBAGIF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,MACXH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,MAAd,iBACAH,EAAAC,EAAAC,cAACqC,EAAD,CAAWtB,aAAgBgB,IAE3BjC,EAAAC,EAAAC,cAACsC,EAAD,KACAxC,EAAAC,EAAAC,cAACuC,EAAD,CAAUjC,OAAU2B,aApCtBO,aA8CHC,cAhES,SAACC,GACrB,MAAM,CACPZ,YAAcY,EAAMC,aAAab,YACjCxB,OAAQoC,EAAME,cAActC,OAC5B0B,UAAYU,EAAME,cAAcZ,UAChCa,MAAQH,EAAME,cAAcC,QAKJ,SAACC,GACxB,MAAO,CACHf,eAAiB,SAACgB,GAAD,OAAWD,ECxEK,CAEjC7B,KCR2B,sBDS3B+B,QDqEoDD,EAAME,OAAOC,SACjEtB,gBAAkB,kBAAMkB,EClEG,SAACA,GAChCA,EAAS,CAAC7B,KCZwB,2BDalCkC,MAAM,8CACDC,KAAK,SAAAC,GAAQ,OAAIA,EAASC,SAC1BF,KAAK,SAAAG,GACFT,EAAS,CAAC7B,KCfgB,yBDea+B,QAAQO,MAElDC,MAAM,SAAAX,GACHC,EAAS,CAAC7B,KCjBe,wBDiBa+B,QAAQH,WD6G3CJ,CAA6Cf,GG5HtD+B,EAAe,CACjB3B,YAAa,IAeX4B,EAAqB,CACvB1B,WAAY,EACZ1B,OAAQ,GACRuC,MAAO,ICbLc,SAASC,0BACTC,EAAcC,YAAgB,CAACnB,aDFT,WAAuC,IAAtCD,EAAsCqB,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAA9BN,EAAcS,EAAgBH,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAP,GAExD,OAAOG,EAAOjD,MACV,IDd2B,sBCe3B,OAAOkD,OAAOC,OAAO,GAAI1B,EAAO,CAACZ,YAAcoC,EAAOlB,UACtD,QACA,OAAQN,ICJmCE,cDetB,WAA4C,IAA3CF,EAA2CqB,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAnCL,EAAoBQ,EAAeH,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAN,GAC/D,OAAOG,EAAOjD,MACV,ID5B8B,yBC6B9B,OAAOkD,OAAOC,OAAO,GAAG1B,EAAO,CAACV,WAAU,IAC1C,ID7B8B,yBC8B9B,OAAOmC,OAAOC,OAAO,GAAI1B,EAAO,CAACpC,OAAO4D,EAAOlB,QAAShB,WAAU,IAClE,ID9B6B,wBC+B7B,OAAOmC,OAAOC,OAAOA,OAAO,GAAG1B,EAAO,CAACG,MAAMqB,EAAOlB,QAAShB,WAAU,IACvE,QACA,OAAOU,MCvBT2B,EAAQC,YAAYT,EAAaU,YAAiBC,IAAgBb,IAExEc,IAASC,OACL5E,EAAAC,EAAAC,cAAC2E,EAAA,EAAD,CAAUN,MAAOA,GACjBvE,EAAAC,EAAAC,cAAC4E,EAAD,OACDC,SAASC,eAAe,ST8GrB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM7B,KAAK,SAAA8B,GACjCA,EAAaC","file":"static/js/main.4225fa1f.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\r\n\r\n\r\nconst Card = ({id,username,email}) =>{\r\n    \r\n    return(\r\n        <div className='bg-light-pink dib tc ma2 bw2 pa3 br3 grow shadow-5'>\r\n        <img src={`https://robohash.org/${id}? 200x200`} alt='asmovic robot' />\r\n        <div>\r\n            <h2>{username}</h2>\r\n            <p>{email}</p>\r\n            </div>  \r\n        </div>\r\n\r\n    );\r\n}\r\n\r\nexport default Card;","import React from'react';\r\nimport Card from './Card.js';\r\n\r\n\r\nconst CardList = ({robots}) =>{\r\n\r\n    return(\r\n\r\n        <div>\r\n           {\r\n               robots.map((user,i) =>{\r\n                return (\r\n                <Card \r\n                key = {i}\r\n                id = {robots[i].id}\r\n                name = {robots[i].name}\r\n                username = {robots[i].username}\r\n                email = {robots[i].email}/>\r\n                )\r\n             })\r\n           };\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default CardList;\r\n","import React from 'react';\r\n\r\n\r\nconst SearchBox = ({searchfield, searchChange}) => {\r\n    return(\r\n        <div className = 'pa2'>\r\n            <input className='pa3 ba b--green bg-lightest-blue' onChange={searchChange} type='search' placeholder='Search Robot..'></input>\r\n        </div>\r\n        \r\n    );\r\n}\r\nexport default SearchBox; ","import React from 'react';\r\n\r\n\r\n\r\nconst Scroll = (props) =>{\r\n    return(\r\n        <div style={{overflowY:'scroll', border : '5px solid black', height:'800px'}}>\r\n            {props.children};\r\n        </div>\r\n    );\r\n\r\n}\r\nexport default Scroll;","/* import React, {Component} from 'react';\r\nimport CardList from '../Components/CardList.js';\r\nimport SearchBox from '../Components/SearchBox.js';\r\nimport './App.css';\r\nimport Scroll from '../Components/Scroll.js';\r\nimport ErrorBoundary from '../Components/ErrorBoundary.js';\r\n\r\n\r\nclass App extends Component{\r\n    constructor(){\r\n        super();\r\n        this.state = {\r\n            robots : [],\r\n            searchField : ''\r\n        }\r\n    }\r\n\r\n    componentDidMount(){\r\n        fetch('https://jsonplaceholder.typicode.com/users').then(response => response.json()).then(users => {this.setState({robots : users})});\r\n    }\r\n\r\n    onSearchChange = (event) =>{\r\n            this.setState({searchField : event.target.value})\r\n\r\n    }\r\n\r\n    render(){\r\n        const{ robots,searchField} = this.state;\r\n        const filteredRobots = robots.filter(robot => {\r\n        return robot.name.toLowerCase().includes(searchField.toLowerCase())\r\n        })\r\n\r\n        return (!robots.length) ?\r\n            <h1>LOADING...</h1>:\r\n            (\r\n                <div className='tc'>\r\n                    <h1>Robot Friends</h1>\r\n                    <SearchBox searchChange = {this.onSearchChange}/>\r\n    \r\n                    <Scroll>\r\n                    <ErrorBoundary>\r\n                    <CardList robots = {filteredRobots} />\r\n                    </ErrorBoundary>\r\n                    </Scroll>\r\n                </div>\r\n            );\r\n        \r\n        \r\n\r\n    }\r\n}\r\n\r\nexport default App;\r\n */\r\n\r\n\r\nimport React, {Component} from 'react';\r\nimport CardList from '../Components/CardList.js';\r\nimport SearchBox from '../Components/SearchBox.js';\r\nimport './App.css';\r\nimport { connect } from 'react-redux';\r\nimport Scroll from '../Components/Scroll.js';\r\n\r\nimport { setSearchField,requestRobots } from '../actions.js';\r\n\r\n\r\nconst mapStateToProps = (state) => {\r\n    return{\r\n   searchField : state.searchRobots.searchField,\r\n   robots: state.requestRobots.robots,\r\n   isPending : state.requestRobots.isPending,\r\n   error : state.requestRobots.error\r\n   \r\n}   \r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        onSearchChange : (event) => dispatch(setSearchField(event.target.value)),\r\n        onRequestRobots : () => dispatch(requestRobots())\r\n    }\r\n}\r\n\r\n\r\nclass App extends Component{\r\n  /*   constructor(){\r\n        super();\r\n        this.state = {\r\n            robots : [],\r\n            /* searchField : '' */\r\n      /*  }\r\n    }\r\n */\r\n\r\n\r\n    componentDidMount(props){\r\n        this.props.onRequestRobots();\r\n        \r\n/*         fetch('https://jsonplaceholder.typicode.com/users')\r\n        .then(response => response.json())\r\n        .then(users => {this.setState({robots : users})}); */\r\n    }\r\n\r\n\r\n    render(){\r\n        \r\n        const { searchField,onSearchChange,robots,isPending } = this.props;\r\n        const filteredRobots = robots.filter(robots => {\r\n        return robots.name.toLowerCase().includes(searchField.toLowerCase())\r\n        })\r\n\r\n        return isPending ?\r\n            <h1>LOADING...</h1> :\r\n        \r\n            (\r\n                <div className='tc'>\r\n                    <h1 className='f1'>Robot Friends</h1>\r\n                    <SearchBox searchChange = {onSearchChange}/>\r\n    \r\n                    <Scroll>\r\n                    <CardList robots = {filteredRobots} />\r\n                    </Scroll>\r\n                </div>\r\n            );\r\n        \r\n        \r\n\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\r\n","import {CHANGE_SEARCH_FIELD} from './constants.js';\r\n\r\nimport {REQUEST_ROBOTS_PENDING} from './constants.js';\r\nimport {REQUEST_ROBOTS_SUCCESS} from './constants.js';\r\nimport {REQUEST_ROBOTS_FAILED} from './constants.js';\r\n\r\nexport const setSearchField = (text) => ({\r\n\r\n        type : CHANGE_SEARCH_FIELD,\r\n        payload : text\r\n    \r\n})\r\n\r\nexport const requestRobots = ( )=> (dispatch) => {\r\n    dispatch({type: REQUEST_ROBOTS_PENDING});\r\n    fetch('https://jsonplaceholder.typicode.com/users')\r\n        .then(response => response.json())\r\n        .then(data =>{\r\n            dispatch({type:REQUEST_ROBOTS_SUCCESS, payload:data})\r\n        })\r\n        .catch(error => {\r\n            dispatch({type:REQUEST_ROBOTS_FAILED, payload:error})\r\n        })\r\n\r\n}","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\r\n\r\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\r\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\r\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';","import {CHANGE_SEARCH_FIELD} from './constants.js';\r\n\r\nimport {REQUEST_ROBOTS_PENDING} from './constants.js';\r\nimport {REQUEST_ROBOTS_SUCCESS} from './constants.js';\r\nimport {REQUEST_ROBOTS_FAILED} from './constants.js';\r\n\r\nconst initialState = {\r\n    searchField :''\r\n}\r\n\r\n\r\nexport const searchRobots = (state = initialState, action = {}) => {\r\n    \r\n    switch(action.type){\r\n        case CHANGE_SEARCH_FIELD :\r\n        return Object.assign({}, state, {searchField : action.payload});\r\n        default : \r\n        return  state;\r\n\r\n    }\r\n}\r\n\r\nconst initialStateRobots = {\r\n    isPending : false,\r\n    robots: [],\r\n    error: ''  \r\n}\r\n\r\nexport const requestRobots = (state = initialStateRobots, action = {}) =>{\r\n    switch(action.type){\r\n        case REQUEST_ROBOTS_PENDING :\r\n        return Object.assign({},state, {isPending:true})\r\n        case REQUEST_ROBOTS_SUCCESS:\r\n        return Object.assign({}, state, {robots:action.payload, isPending:false})\r\n        case REQUEST_ROBOTS_FAILED:\r\n        return Object.assign.assign({},state, {error:action.payload, isPending:false})\r\n        default:\r\n        return state;\r\n    }\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { createLogger } from 'redux-logger';\nimport thunkMiddleware from 'redux-thunk';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport App from './Containers/App.js';\nimport { searchRobots,requestRobots } from './reducers';\nimport 'tachyons';\n\nconst logger = createLogger();\nconst rootReducer = combineReducers({searchRobots, requestRobots})\nconst store = createStore(rootReducer, applyMiddleware( thunkMiddleware,logger ));\n\nReactDOM.render(\n    <Provider store={store}>\n    <App /></Provider>\n , document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}